// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketType.proto

#ifndef PROTOBUF_PacketType_2eproto__INCLUDED
#define PROTOBUF_PacketType_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PacketType_2eproto();
void protobuf_AssignDesc_PacketType_2eproto();
void protobuf_ShutdownFile_PacketType_2eproto();

class PacketHeader;
class LoginRequest;
class LoginResult;
class LoginBroadcastResult;

enum PacketHeader_PacketType {
  PacketHeader_PacketType_PKT_NONE = 0,
  PacketHeader_PacketType_PKT_CS_LOGIN = 1,
  PacketHeader_PacketType_PKT_SC_LOGIN = 2,
  PacketHeader_PacketType_PKT_SC_LOGIN_BROADCAST = 3
};
bool PacketHeader_PacketType_IsValid(int value);
const PacketHeader_PacketType PacketHeader_PacketType_PacketType_MIN = PacketHeader_PacketType_PKT_NONE;
const PacketHeader_PacketType PacketHeader_PacketType_PacketType_MAX = PacketHeader_PacketType_PKT_SC_LOGIN_BROADCAST;
const int PacketHeader_PacketType_PacketType_ARRAYSIZE = PacketHeader_PacketType_PacketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketHeader_PacketType_descriptor();
inline const ::std::string& PacketHeader_PacketType_Name(PacketHeader_PacketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketHeader_PacketType_descriptor(), value);
}
inline bool PacketHeader_PacketType_Parse(
    const ::std::string& name, PacketHeader_PacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketHeader_PacketType>(
    PacketHeader_PacketType_descriptor(), name, value);
}
// ===================================================================

class PacketHeader : public ::google::protobuf::Message {
 public:
  PacketHeader();
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader& default_instance();

  void Swap(PacketHeader* other);

  // implements Message ----------------------------------------------

  PacketHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PacketHeader_PacketType PacketType;
  static const PacketType PKT_NONE = PacketHeader_PacketType_PKT_NONE;
  static const PacketType PKT_CS_LOGIN = PacketHeader_PacketType_PKT_CS_LOGIN;
  static const PacketType PKT_SC_LOGIN = PacketHeader_PacketType_PKT_SC_LOGIN;
  static const PacketType PKT_SC_LOGIN_BROADCAST = PacketHeader_PacketType_PKT_SC_LOGIN_BROADCAST;
  static inline bool PacketType_IsValid(int value) {
    return PacketHeader_PacketType_IsValid(value);
  }
  static const PacketType PacketType_MIN =
    PacketHeader_PacketType_PacketType_MIN;
  static const PacketType PacketType_MAX =
    PacketHeader_PacketType_PacketType_MAX;
  static const int PacketType_ARRAYSIZE =
    PacketHeader_PacketType_PacketType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PacketType_descriptor() {
    return PacketHeader_PacketType_descriptor();
  }
  static inline const ::std::string& PacketType_Name(PacketType value) {
    return PacketHeader_PacketType_Name(value);
  }
  static inline bool PacketType_Parse(const ::std::string& name,
      PacketType* value) {
    return PacketHeader_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 mSize = 1;
  inline bool has_msize() const;
  inline void clear_msize();
  static const int kMSizeFieldNumber = 1;
  inline ::google::protobuf::int32 msize() const;
  inline void set_msize(::google::protobuf::int32 value);

  // required .packet.PacketHeader.PacketType mType = 2;
  inline bool has_mtype() const;
  inline void clear_mtype();
  static const int kMTypeFieldNumber = 2;
  inline ::packet::PacketHeader_PacketType mtype() const;
  inline void set_mtype(::packet::PacketHeader_PacketType value);

  // @@protoc_insertion_point(class_scope:packet.PacketHeader)
 private:
  inline void set_has_msize();
  inline void clear_has_msize();
  inline void set_has_mtype();
  inline void clear_has_mtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 msize_;
  int mtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PacketType_2eproto();
  friend void protobuf_AssignDesc_PacketType_2eproto();
  friend void protobuf_ShutdownFile_PacketType_2eproto();

  void InitAsDefaultInstance();
  static PacketHeader* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .packet.PacketHeader mHeader = 1;
  inline bool has_mheader() const;
  inline void clear_mheader();
  static const int kMHeaderFieldNumber = 1;
  inline const ::packet::PacketHeader& mheader() const;
  inline ::packet::PacketHeader* mutable_mheader();
  inline ::packet::PacketHeader* release_mheader();
  inline void set_allocated_mheader(::packet::PacketHeader* mheader);

  // @@protoc_insertion_point(class_scope:packet.LoginRequest)
 private:
  inline void set_has_mheader();
  inline void clear_has_mheader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::packet::PacketHeader* mheader_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PacketType_2eproto();
  friend void protobuf_AssignDesc_PacketType_2eproto();
  friend void protobuf_ShutdownFile_PacketType_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResult : public ::google::protobuf::Message {
 public:
  LoginResult();
  virtual ~LoginResult();

  LoginResult(const LoginResult& from);

  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResult& default_instance();

  void Swap(LoginResult* other);

  // implements Message ----------------------------------------------

  LoginResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResult& from);
  void MergeFrom(const LoginResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .packet.PacketHeader mHeader = 1;
  inline bool has_mheader() const;
  inline void clear_mheader();
  static const int kMHeaderFieldNumber = 1;
  inline const ::packet::PacketHeader& mheader() const;
  inline ::packet::PacketHeader* mutable_mheader();
  inline ::packet::PacketHeader* release_mheader();
  inline void set_allocated_mheader(::packet::PacketHeader* mheader);

  // required int32 mPlyaerID = 2;
  inline bool has_mplyaerid() const;
  inline void clear_mplyaerid();
  static const int kMPlyaerIDFieldNumber = 2;
  inline ::google::protobuf::int32 mplyaerid() const;
  inline void set_mplyaerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:packet.LoginResult)
 private:
  inline void set_has_mheader();
  inline void clear_has_mheader();
  inline void set_has_mplyaerid();
  inline void clear_has_mplyaerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::packet::PacketHeader* mheader_;
  ::google::protobuf::int32 mplyaerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PacketType_2eproto();
  friend void protobuf_AssignDesc_PacketType_2eproto();
  friend void protobuf_ShutdownFile_PacketType_2eproto();

  void InitAsDefaultInstance();
  static LoginResult* default_instance_;
};
// -------------------------------------------------------------------

class LoginBroadcastResult : public ::google::protobuf::Message {
 public:
  LoginBroadcastResult();
  virtual ~LoginBroadcastResult();

  LoginBroadcastResult(const LoginBroadcastResult& from);

  inline LoginBroadcastResult& operator=(const LoginBroadcastResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginBroadcastResult& default_instance();

  void Swap(LoginBroadcastResult* other);

  // implements Message ----------------------------------------------

  LoginBroadcastResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginBroadcastResult& from);
  void MergeFrom(const LoginBroadcastResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .packet.PacketHeader mHeader = 1;
  inline bool has_mheader() const;
  inline void clear_mheader();
  static const int kMHeaderFieldNumber = 1;
  inline const ::packet::PacketHeader& mheader() const;
  inline ::packet::PacketHeader* mutable_mheader();
  inline ::packet::PacketHeader* release_mheader();
  inline void set_allocated_mheader(::packet::PacketHeader* mheader);

  // required int32 mPlayerID = 2;
  inline bool has_mplayerid() const;
  inline void clear_mplayerid();
  static const int kMPlayerIDFieldNumber = 2;
  inline ::google::protobuf::int32 mplayerid() const;
  inline void set_mplayerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:packet.LoginBroadcastResult)
 private:
  inline void set_has_mheader();
  inline void clear_has_mheader();
  inline void set_has_mplayerid();
  inline void clear_has_mplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::packet::PacketHeader* mheader_;
  ::google::protobuf::int32 mplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PacketType_2eproto();
  friend void protobuf_AssignDesc_PacketType_2eproto();
  friend void protobuf_ShutdownFile_PacketType_2eproto();

  void InitAsDefaultInstance();
  static LoginBroadcastResult* default_instance_;
};
// ===================================================================


// ===================================================================

// PacketHeader

// required int32 mSize = 1;
inline bool PacketHeader::has_msize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketHeader::set_has_msize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketHeader::clear_has_msize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketHeader::clear_msize() {
  msize_ = 0;
  clear_has_msize();
}
inline ::google::protobuf::int32 PacketHeader::msize() const {
  return msize_;
}
inline void PacketHeader::set_msize(::google::protobuf::int32 value) {
  set_has_msize();
  msize_ = value;
}

// required .packet.PacketHeader.PacketType mType = 2;
inline bool PacketHeader::has_mtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketHeader::set_has_mtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketHeader::clear_has_mtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketHeader::clear_mtype() {
  mtype_ = 0;
  clear_has_mtype();
}
inline ::packet::PacketHeader_PacketType PacketHeader::mtype() const {
  return static_cast< ::packet::PacketHeader_PacketType >(mtype_);
}
inline void PacketHeader::set_mtype(::packet::PacketHeader_PacketType value) {
  assert(::packet::PacketHeader_PacketType_IsValid(value));
  set_has_mtype();
  mtype_ = value;
}

// -------------------------------------------------------------------

// LoginRequest

// required .packet.PacketHeader mHeader = 1;
inline bool LoginRequest::has_mheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_mheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_mheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_mheader() {
  if (mheader_ != NULL) mheader_->::packet::PacketHeader::Clear();
  clear_has_mheader();
}
inline const ::packet::PacketHeader& LoginRequest::mheader() const {
  return mheader_ != NULL ? *mheader_ : *default_instance_->mheader_;
}
inline ::packet::PacketHeader* LoginRequest::mutable_mheader() {
  set_has_mheader();
  if (mheader_ == NULL) mheader_ = new ::packet::PacketHeader;
  return mheader_;
}
inline ::packet::PacketHeader* LoginRequest::release_mheader() {
  clear_has_mheader();
  ::packet::PacketHeader* temp = mheader_;
  mheader_ = NULL;
  return temp;
}
inline void LoginRequest::set_allocated_mheader(::packet::PacketHeader* mheader) {
  delete mheader_;
  mheader_ = mheader;
  if (mheader) {
    set_has_mheader();
  } else {
    clear_has_mheader();
  }
}

// -------------------------------------------------------------------

// LoginResult

// required .packet.PacketHeader mHeader = 1;
inline bool LoginResult::has_mheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResult::set_has_mheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResult::clear_has_mheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResult::clear_mheader() {
  if (mheader_ != NULL) mheader_->::packet::PacketHeader::Clear();
  clear_has_mheader();
}
inline const ::packet::PacketHeader& LoginResult::mheader() const {
  return mheader_ != NULL ? *mheader_ : *default_instance_->mheader_;
}
inline ::packet::PacketHeader* LoginResult::mutable_mheader() {
  set_has_mheader();
  if (mheader_ == NULL) mheader_ = new ::packet::PacketHeader;
  return mheader_;
}
inline ::packet::PacketHeader* LoginResult::release_mheader() {
  clear_has_mheader();
  ::packet::PacketHeader* temp = mheader_;
  mheader_ = NULL;
  return temp;
}
inline void LoginResult::set_allocated_mheader(::packet::PacketHeader* mheader) {
  delete mheader_;
  mheader_ = mheader;
  if (mheader) {
    set_has_mheader();
  } else {
    clear_has_mheader();
  }
}

// required int32 mPlyaerID = 2;
inline bool LoginResult::has_mplyaerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResult::set_has_mplyaerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResult::clear_has_mplyaerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResult::clear_mplyaerid() {
  mplyaerid_ = 0;
  clear_has_mplyaerid();
}
inline ::google::protobuf::int32 LoginResult::mplyaerid() const {
  return mplyaerid_;
}
inline void LoginResult::set_mplyaerid(::google::protobuf::int32 value) {
  set_has_mplyaerid();
  mplyaerid_ = value;
}

// -------------------------------------------------------------------

// LoginBroadcastResult

// required .packet.PacketHeader mHeader = 1;
inline bool LoginBroadcastResult::has_mheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginBroadcastResult::set_has_mheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginBroadcastResult::clear_has_mheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginBroadcastResult::clear_mheader() {
  if (mheader_ != NULL) mheader_->::packet::PacketHeader::Clear();
  clear_has_mheader();
}
inline const ::packet::PacketHeader& LoginBroadcastResult::mheader() const {
  return mheader_ != NULL ? *mheader_ : *default_instance_->mheader_;
}
inline ::packet::PacketHeader* LoginBroadcastResult::mutable_mheader() {
  set_has_mheader();
  if (mheader_ == NULL) mheader_ = new ::packet::PacketHeader;
  return mheader_;
}
inline ::packet::PacketHeader* LoginBroadcastResult::release_mheader() {
  clear_has_mheader();
  ::packet::PacketHeader* temp = mheader_;
  mheader_ = NULL;
  return temp;
}
inline void LoginBroadcastResult::set_allocated_mheader(::packet::PacketHeader* mheader) {
  delete mheader_;
  mheader_ = mheader;
  if (mheader) {
    set_has_mheader();
  } else {
    clear_has_mheader();
  }
}

// required int32 mPlayerID = 2;
inline bool LoginBroadcastResult::has_mplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginBroadcastResult::set_has_mplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginBroadcastResult::clear_has_mplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginBroadcastResult::clear_mplayerid() {
  mplayerid_ = 0;
  clear_has_mplayerid();
}
inline ::google::protobuf::int32 LoginBroadcastResult::mplayerid() const {
  return mplayerid_;
}
inline void LoginBroadcastResult::set_mplayerid(::google::protobuf::int32 value) {
  set_has_mplayerid();
  mplayerid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::packet::PacketHeader_PacketType>() {
  return ::packet::PacketHeader_PacketType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PacketType_2eproto__INCLUDED
