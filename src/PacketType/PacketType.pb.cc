// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketType.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PacketType.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace packet {

namespace {

const ::google::protobuf::Descriptor* PacketHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketHeader_PacketType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginBroadcastResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginBroadcastResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PacketType_2eproto() {
  protobuf_AddDesc_PacketType_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PacketType.proto");
  GOOGLE_CHECK(file != NULL);
  PacketHeader_descriptor_ = file->message_type(0);
  static const int PacketHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, msize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, mtype_),
  };
  PacketHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PacketHeader_descriptor_,
      PacketHeader::default_instance_,
      PacketHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PacketHeader));
  PacketHeader_PacketType_descriptor_ = PacketHeader_descriptor_->enum_type(0);
  LoginRequest_descriptor_ = file->message_type(1);
  static const int LoginRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, mheader_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResult_descriptor_ = file->message_type(2);
  static const int LoginResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, mheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, mplyaerid_),
  };
  LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResult_descriptor_,
      LoginResult::default_instance_,
      LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResult));
  LoginBroadcastResult_descriptor_ = file->message_type(3);
  static const int LoginBroadcastResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, mheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, mplayerid_),
  };
  LoginBroadcastResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginBroadcastResult_descriptor_,
      LoginBroadcastResult::default_instance_,
      LoginBroadcastResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginBroadcastResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PacketType_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PacketHeader_descriptor_, &PacketHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResult_descriptor_, &LoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginBroadcastResult_descriptor_, &LoginBroadcastResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PacketType_2eproto() {
  delete PacketHeader::default_instance_;
  delete PacketHeader_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResult::default_instance_;
  delete LoginResult_reflection_;
  delete LoginBroadcastResult::default_instance_;
  delete LoginBroadcastResult_reflection_;
}

void protobuf_AddDesc_PacketType_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020PacketType.proto\022\006packet\"\251\001\n\014PacketHea"
    "der\022\r\n\005mSize\030\001 \002(\005\022.\n\005mType\030\002 \002(\0162\037.pack"
    "et.PacketHeader.PacketType\"Z\n\nPacketType"
    "\022\014\n\010PKT_NONE\020\000\022\020\n\014PKT_CS_LOGIN\020\001\022\020\n\014PKT_"
    "SC_LOGIN\020\002\022\032\n\026PKT_SC_LOGIN_BROADCAST\020\003\"5"
    "\n\014LoginRequest\022%\n\007mHeader\030\001 \002(\0132\024.packet"
    ".PacketHeader\"G\n\013LoginResult\022%\n\007mHeader\030"
    "\001 \002(\0132\024.packet.PacketHeader\022\021\n\tmPlyaerID"
    "\030\002 \002(\005\"P\n\024LoginBroadcastResult\022%\n\007mHeade"
    "r\030\001 \002(\0132\024.packet.PacketHeader\022\021\n\tmPlayer"
    "ID\030\002 \002(\005", 408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PacketType.proto", &protobuf_RegisterTypes);
  PacketHeader::default_instance_ = new PacketHeader();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResult::default_instance_ = new LoginResult();
  LoginBroadcastResult::default_instance_ = new LoginBroadcastResult();
  PacketHeader::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResult::default_instance_->InitAsDefaultInstance();
  LoginBroadcastResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PacketType_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PacketType_2eproto {
  StaticDescriptorInitializer_PacketType_2eproto() {
    protobuf_AddDesc_PacketType_2eproto();
  }
} static_descriptor_initializer_PacketType_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PacketHeader_PacketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_PacketType_descriptor_;
}
bool PacketHeader_PacketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PacketHeader_PacketType PacketHeader::PKT_NONE;
const PacketHeader_PacketType PacketHeader::PKT_CS_LOGIN;
const PacketHeader_PacketType PacketHeader::PKT_SC_LOGIN;
const PacketHeader_PacketType PacketHeader::PKT_SC_LOGIN_BROADCAST;
const PacketHeader_PacketType PacketHeader::PacketType_MIN;
const PacketHeader_PacketType PacketHeader::PacketType_MAX;
const int PacketHeader::PacketType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PacketHeader::kMSizeFieldNumber;
const int PacketHeader::kMTypeFieldNumber;
#endif  // !_MSC_VER

PacketHeader::PacketHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PacketHeader::InitAsDefaultInstance() {
}

PacketHeader::PacketHeader(const PacketHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PacketHeader::SharedCtor() {
  _cached_size_ = 0;
  msize_ = 0;
  mtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketHeader::~PacketHeader() {
  SharedDtor();
}

void PacketHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PacketHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_descriptor_;
}

const PacketHeader& PacketHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketType_2eproto();
  return *default_instance_;
}

PacketHeader* PacketHeader::default_instance_ = NULL;

PacketHeader* PacketHeader::New() const {
  return new PacketHeader;
}

void PacketHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msize_ = 0;
    mtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PacketHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msize_)));
          set_has_msize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mType;
        break;
      }

      // required .packet.PacketHeader.PacketType mType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::packet::PacketHeader_PacketType_IsValid(value)) {
            set_mtype(static_cast< ::packet::PacketHeader_PacketType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PacketHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mSize = 1;
  if (has_msize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msize(), output);
  }

  // required .packet.PacketHeader.PacketType mType = 2;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PacketHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mSize = 1;
  if (has_msize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msize(), target);
  }

  // required .packet.PacketHeader.PacketType mType = 2;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PacketHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mSize = 1;
    if (has_msize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msize());
    }

    // required .packet.PacketHeader.PacketType mType = 2;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PacketHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PacketHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketHeader::MergeFrom(const PacketHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msize()) {
      set_msize(from.msize());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PacketHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PacketHeader::Swap(PacketHeader* other) {
  if (other != this) {
    std::swap(msize_, other->msize_);
    std::swap(mtype_, other->mtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PacketHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketHeader_descriptor_;
  metadata.reflection = PacketHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kMHeaderFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
  mheader_ = const_cast< ::packet::PacketHeader*>(&::packet::PacketHeader::default_instance());
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  mheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (this != default_instance_) {
    delete mheader_;
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketType_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mheader()) {
      if (mheader_ != NULL) mheader_->::packet::PacketHeader::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .packet.PacketHeader mHeader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .packet.PacketHeader mHeader = 1;
  if (has_mheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mheader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .packet.PacketHeader mHeader = 1;
  if (has_mheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mheader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .packet.PacketHeader mHeader = 1;
    if (has_mheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mheader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mheader()) {
      mutable_mheader()->::packet::PacketHeader::MergeFrom(from.mheader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mheader()) {
    if (!this->mheader().IsInitialized()) return false;
  }
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(mheader_, other->mheader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResult::kMHeaderFieldNumber;
const int LoginResult::kMPlyaerIDFieldNumber;
#endif  // !_MSC_VER

LoginResult::LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResult::InitAsDefaultInstance() {
  mheader_ = const_cast< ::packet::PacketHeader*>(&::packet::PacketHeader::default_instance());
}

LoginResult::LoginResult(const LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResult::SharedCtor() {
  _cached_size_ = 0;
  mheader_ = NULL;
  mplyaerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResult::~LoginResult() {
  SharedDtor();
}

void LoginResult::SharedDtor() {
  if (this != default_instance_) {
    delete mheader_;
  }
}

void LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}

const LoginResult& LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketType_2eproto();
  return *default_instance_;
}

LoginResult* LoginResult::default_instance_ = NULL;

LoginResult* LoginResult::New() const {
  return new LoginResult;
}

void LoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mheader()) {
      if (mheader_ != NULL) mheader_->::packet::PacketHeader::Clear();
    }
    mplyaerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .packet.PacketHeader mHeader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mPlyaerID;
        break;
      }

      // required int32 mPlyaerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mPlyaerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mplyaerid_)));
          set_has_mplyaerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .packet.PacketHeader mHeader = 1;
  if (has_mheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mheader(), output);
  }

  // required int32 mPlyaerID = 2;
  if (has_mplyaerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mplyaerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .packet.PacketHeader mHeader = 1;
  if (has_mheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mheader(), target);
  }

  // required int32 mPlyaerID = 2;
  if (has_mplyaerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mplyaerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .packet.PacketHeader mHeader = 1;
    if (has_mheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mheader());
    }

    // required int32 mPlyaerID = 2;
    if (has_mplyaerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mplyaerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResult::MergeFrom(const LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mheader()) {
      mutable_mheader()->::packet::PacketHeader::MergeFrom(from.mheader());
    }
    if (from.has_mplyaerid()) {
      set_mplyaerid(from.mplyaerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResult::CopyFrom(const LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mheader()) {
    if (!this->mheader().IsInitialized()) return false;
  }
  return true;
}

void LoginResult::Swap(LoginResult* other) {
  if (other != this) {
    std::swap(mheader_, other->mheader_);
    std::swap(mplyaerid_, other->mplyaerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResult_descriptor_;
  metadata.reflection = LoginResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginBroadcastResult::kMHeaderFieldNumber;
const int LoginBroadcastResult::kMPlayerIDFieldNumber;
#endif  // !_MSC_VER

LoginBroadcastResult::LoginBroadcastResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginBroadcastResult::InitAsDefaultInstance() {
  mheader_ = const_cast< ::packet::PacketHeader*>(&::packet::PacketHeader::default_instance());
}

LoginBroadcastResult::LoginBroadcastResult(const LoginBroadcastResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginBroadcastResult::SharedCtor() {
  _cached_size_ = 0;
  mheader_ = NULL;
  mplayerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginBroadcastResult::~LoginBroadcastResult() {
  SharedDtor();
}

void LoginBroadcastResult::SharedDtor() {
  if (this != default_instance_) {
    delete mheader_;
  }
}

void LoginBroadcastResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginBroadcastResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginBroadcastResult_descriptor_;
}

const LoginBroadcastResult& LoginBroadcastResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketType_2eproto();
  return *default_instance_;
}

LoginBroadcastResult* LoginBroadcastResult::default_instance_ = NULL;

LoginBroadcastResult* LoginBroadcastResult::New() const {
  return new LoginBroadcastResult;
}

void LoginBroadcastResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mheader()) {
      if (mheader_ != NULL) mheader_->::packet::PacketHeader::Clear();
    }
    mplayerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginBroadcastResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .packet.PacketHeader mHeader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mPlayerID;
        break;
      }

      // required int32 mPlayerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mplayerid_)));
          set_has_mplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginBroadcastResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .packet.PacketHeader mHeader = 1;
  if (has_mheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mheader(), output);
  }

  // required int32 mPlayerID = 2;
  if (has_mplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginBroadcastResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .packet.PacketHeader mHeader = 1;
  if (has_mheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mheader(), target);
  }

  // required int32 mPlayerID = 2;
  if (has_mplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginBroadcastResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .packet.PacketHeader mHeader = 1;
    if (has_mheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mheader());
    }

    // required int32 mPlayerID = 2;
    if (has_mplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginBroadcastResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginBroadcastResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginBroadcastResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginBroadcastResult::MergeFrom(const LoginBroadcastResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mheader()) {
      mutable_mheader()->::packet::PacketHeader::MergeFrom(from.mheader());
    }
    if (from.has_mplayerid()) {
      set_mplayerid(from.mplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginBroadcastResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginBroadcastResult::CopyFrom(const LoginBroadcastResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginBroadcastResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mheader()) {
    if (!this->mheader().IsInitialized()) return false;
  }
  return true;
}

void LoginBroadcastResult::Swap(LoginBroadcastResult* other) {
  if (other != this) {
    std::swap(mheader_, other->mheader_);
    std::swap(mplayerid_, other->mplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginBroadcastResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginBroadcastResult_descriptor_;
  metadata.reflection = LoginBroadcastResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)
