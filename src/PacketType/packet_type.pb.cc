// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet_type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginBroadcastResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginBroadcastResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorChangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponeBroadcastResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponeBroadcastResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AngleChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AngleChangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AngleChangeBroadcastResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AngleChangeBroadcastResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveKeyPressRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveKeyPressRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveStopResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveStopResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackKeyPressRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackKeyPressRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackBroadcastResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackBroadcastResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPChangeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPChangeResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_5ftype_2eproto() {
  protobuf_AddDesc_packet_5ftype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet_type.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[1] = {
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResult_descriptor_ = file->message_type(1);
  static const int LoginResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, player_id_),
  };
  LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResult_descriptor_,
      LoginResult::default_instance_,
      LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResult));
  LoginBroadcastResult_descriptor_ = file->message_type(2);
  static const int LoginBroadcastResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, velocity_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, size_),
  };
  LoginBroadcastResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginBroadcastResult_descriptor_,
      LoginBroadcastResult::default_instance_,
      LoginBroadcastResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginBroadcastResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginBroadcastResult));
  ColorChangeRequest_descriptor_ = file->message_type(3);
  static const int ColorChangeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorChangeRequest, color_),
  };
  ColorChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorChangeRequest_descriptor_,
      ColorChangeRequest::default_instance_,
      ColorChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorChangeRequest));
  ResponeBroadcastResult_descriptor_ = file->message_type(4);
  static const int ResponeBroadcastResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, velocity_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, size_),
  };
  ResponeBroadcastResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponeBroadcastResult_descriptor_,
      ResponeBroadcastResult::default_instance_,
      ResponeBroadcastResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponeBroadcastResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponeBroadcastResult));
  AngleChangeRequest_descriptor_ = file->message_type(5);
  static const int AngleChangeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChangeRequest, angle_),
  };
  AngleChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AngleChangeRequest_descriptor_,
      AngleChangeRequest::default_instance_,
      AngleChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AngleChangeRequest));
  AngleChangeBroadcastResult_descriptor_ = file->message_type(6);
  static const int AngleChangeBroadcastResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChangeBroadcastResult, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChangeBroadcastResult, angle_),
  };
  AngleChangeBroadcastResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AngleChangeBroadcastResult_descriptor_,
      AngleChangeBroadcastResult::default_instance_,
      AngleChangeBroadcastResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChangeBroadcastResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChangeBroadcastResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AngleChangeBroadcastResult));
  MoveKeyPressRequest_descriptor_ = file->message_type(7);
  static const int MoveKeyPressRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveKeyPressRequest, move_key_w_press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveKeyPressRequest, move_key_a_press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveKeyPressRequest, move_key_s_press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveKeyPressRequest, move_key_d_press_),
  };
  MoveKeyPressRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveKeyPressRequest_descriptor_,
      MoveKeyPressRequest::default_instance_,
      MoveKeyPressRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveKeyPressRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveKeyPressRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveKeyPressRequest));
  MoveResult_descriptor_ = file->message_type(8);
  static const int MoveResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResult, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResult, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResult, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResult, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResult, velocity_y_),
  };
  MoveResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveResult_descriptor_,
      MoveResult::default_instance_,
      MoveResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveResult));
  MoveStopResult_descriptor_ = file->message_type(9);
  static const int MoveStopResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStopResult, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStopResult, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStopResult, position_y_),
  };
  MoveStopResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveStopResult_descriptor_,
      MoveStopResult::default_instance_,
      MoveStopResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStopResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStopResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveStopResult));
  AttackKeyPressRequest_descriptor_ = file->message_type(10);
  static const int AttackKeyPressRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackKeyPressRequest, attack_key_mouse_left_press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackKeyPressRequest, angle_),
  };
  AttackKeyPressRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackKeyPressRequest_descriptor_,
      AttackKeyPressRequest::default_instance_,
      AttackKeyPressRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackKeyPressRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackKeyPressRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackKeyPressRequest));
  AttackBroadcastResult_descriptor_ = file->message_type(11);
  static const int AttackBroadcastResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackBroadcastResult, attack_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackBroadcastResult, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackBroadcastResult, kind_of_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackBroadcastResult, damaged_player_count_),
  };
  AttackBroadcastResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackBroadcastResult_descriptor_,
      AttackBroadcastResult::default_instance_,
      AttackBroadcastResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackBroadcastResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackBroadcastResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackBroadcastResult));
  HPChangeResult_descriptor_ = file->message_type(12);
  static const int HPChangeResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeResult, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeResult, player_hp_),
  };
  HPChangeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPChangeResult_descriptor_,
      HPChangeResult::default_instance_,
      HPChangeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChangeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPChangeResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_5ftype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResult_descriptor_, &LoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginBroadcastResult_descriptor_, &LoginBroadcastResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorChangeRequest_descriptor_, &ColorChangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponeBroadcastResult_descriptor_, &ResponeBroadcastResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AngleChangeRequest_descriptor_, &AngleChangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AngleChangeBroadcastResult_descriptor_, &AngleChangeBroadcastResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveKeyPressRequest_descriptor_, &MoveKeyPressRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveResult_descriptor_, &MoveResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveStopResult_descriptor_, &MoveStopResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackKeyPressRequest_descriptor_, &AttackKeyPressRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackBroadcastResult_descriptor_, &AttackBroadcastResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPChangeResult_descriptor_, &HPChangeResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_5ftype_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResult::default_instance_;
  delete LoginResult_reflection_;
  delete LoginBroadcastResult::default_instance_;
  delete LoginBroadcastResult_reflection_;
  delete ColorChangeRequest::default_instance_;
  delete ColorChangeRequest_reflection_;
  delete ResponeBroadcastResult::default_instance_;
  delete ResponeBroadcastResult_reflection_;
  delete AngleChangeRequest::default_instance_;
  delete AngleChangeRequest_reflection_;
  delete AngleChangeBroadcastResult::default_instance_;
  delete AngleChangeBroadcastResult_reflection_;
  delete MoveKeyPressRequest::default_instance_;
  delete MoveKeyPressRequest_reflection_;
  delete MoveResult::default_instance_;
  delete MoveResult_reflection_;
  delete MoveStopResult::default_instance_;
  delete MoveStopResult_reflection_;
  delete AttackKeyPressRequest::default_instance_;
  delete AttackKeyPressRequest_reflection_;
  delete AttackBroadcastResult::default_instance_;
  delete AttackBroadcastResult_reflection_;
  delete HPChangeResult::default_instance_;
  delete HPChangeResult_reflection_;
}

void protobuf_AddDesc_packet_5ftype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021packet_type.proto\"\016\n\014LoginRequest\" \n\013L"
    "oginResult\022\021\n\tplayer_id\030\001 \002(\005\"\245\001\n\024LoginB"
    "roadcastResult\022\021\n\tplayer_id\030\001 \002(\005\022\022\n\npos"
    "ition_x\030\002 \002(\002\022\022\n\nposition_y\030\003 \002(\002\022\022\n\nvel"
    "ocity_x\030\004 \002(\002\022\022\n\nvelocity_y\030\005 \002(\002\022\r\n\005ang"
    "le\030\006 \002(\002\022\r\n\005color\030\007 \002(\005\022\014\n\004size\030\010 \002(\005\"#\n"
    "\022ColorChangeRequest\022\r\n\005color\030\001 \002(\005\"\247\001\n\026R"
    "esponeBroadcastResult\022\021\n\tplayer_id\030\001 \002(\005"
    "\022\022\n\nposition_x\030\002 \002(\002\022\022\n\nposition_y\030\003 \002(\002"
    "\022\022\n\nvelocity_x\030\004 \002(\002\022\022\n\nvelocity_y\030\005 \002(\002"
    "\022\r\n\005angle\030\006 \002(\002\022\r\n\005color\030\007 \002(\005\022\014\n\004size\030\010"
    " \002(\005\"#\n\022AngleChangeRequest\022\r\n\005angle\030\001 \002("
    "\002\">\n\032AngleChangeBroadcastResult\022\021\n\tplaye"
    "r_id\030\001 \002(\005\022\r\n\005angle\030\002 \002(\002\"}\n\023MoveKeyPres"
    "sRequest\022\030\n\020move_key_w_press\030\001 \002(\010\022\030\n\020mo"
    "ve_key_a_press\030\002 \002(\010\022\030\n\020move_key_s_press"
    "\030\003 \002(\010\022\030\n\020move_key_d_press\030\004 \002(\010\"o\n\nMove"
    "Result\022\021\n\tplayer_id\030\001 \002(\005\022\022\n\nposition_x\030"
    "\002 \002(\002\022\022\n\nposition_y\030\003 \002(\002\022\022\n\nvelocity_x\030"
    "\004 \002(\002\022\022\n\nvelocity_y\030\005 \002(\002\"K\n\016MoveStopRes"
    "ult\022\021\n\tplayer_id\030\001 \002(\005\022\022\n\nposition_x\030\002 \002"
    "(\002\022\022\n\nposition_y\030\003 \002(\002\"K\n\025AttackKeyPress"
    "Request\022#\n\033attack_key_mouse_left_press\030\001"
    " \002(\010\022\r\n\005angle\030\002 \002(\002\"v\n\025AttackBroadcastRe"
    "sult\022\030\n\020attack_player_id\030\001 \002(\005\022\r\n\005angle\030"
    "\002 \002(\002\022\026\n\016kind_of_attack\030\003 \002(\005\022\034\n\024damaged"
    "_player_count\030\004 \002(\005\"6\n\016HPChangeResult\022\021\n"
    "\tplayer_id\030\001 \002(\005\022\021\n\tplayer_hp\030\002 \002(\005", 1115);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet_type.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResult::default_instance_ = new LoginResult();
  LoginBroadcastResult::default_instance_ = new LoginBroadcastResult();
  ColorChangeRequest::default_instance_ = new ColorChangeRequest();
  ResponeBroadcastResult::default_instance_ = new ResponeBroadcastResult();
  AngleChangeRequest::default_instance_ = new AngleChangeRequest();
  AngleChangeBroadcastResult::default_instance_ = new AngleChangeBroadcastResult();
  MoveKeyPressRequest::default_instance_ = new MoveKeyPressRequest();
  MoveResult::default_instance_ = new MoveResult();
  MoveStopResult::default_instance_ = new MoveStopResult();
  AttackKeyPressRequest::default_instance_ = new AttackKeyPressRequest();
  AttackBroadcastResult::default_instance_ = new AttackBroadcastResult();
  HPChangeResult::default_instance_ = new HPChangeResult();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResult::default_instance_->InitAsDefaultInstance();
  LoginBroadcastResult::default_instance_->InitAsDefaultInstance();
  ColorChangeRequest::default_instance_->InitAsDefaultInstance();
  ResponeBroadcastResult::default_instance_->InitAsDefaultInstance();
  AngleChangeRequest::default_instance_->InitAsDefaultInstance();
  AngleChangeBroadcastResult::default_instance_->InitAsDefaultInstance();
  MoveKeyPressRequest::default_instance_->InitAsDefaultInstance();
  MoveResult::default_instance_->InitAsDefaultInstance();
  MoveStopResult::default_instance_->InitAsDefaultInstance();
  AttackKeyPressRequest::default_instance_->InitAsDefaultInstance();
  AttackBroadcastResult::default_instance_->InitAsDefaultInstance();
  HPChangeResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_5ftype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_5ftype_2eproto {
  StaticDescriptorInitializer_packet_5ftype_2eproto() {
    protobuf_AddDesc_packet_5ftype_2eproto();
  }
} static_descriptor_initializer_packet_5ftype_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResult::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

LoginResult::LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResult::InitAsDefaultInstance() {
}

LoginResult::LoginResult(const LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResult::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResult::~LoginResult() {
  SharedDtor();
}

void LoginResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}

const LoginResult& LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

LoginResult* LoginResult::default_instance_ = NULL;

LoginResult* LoginResult::New() const {
  return new LoginResult;
}

void LoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResult::MergeFrom(const LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResult::CopyFrom(const LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResult::Swap(LoginResult* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResult_descriptor_;
  metadata.reflection = LoginResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginBroadcastResult::kPlayerIdFieldNumber;
const int LoginBroadcastResult::kPositionXFieldNumber;
const int LoginBroadcastResult::kPositionYFieldNumber;
const int LoginBroadcastResult::kVelocityXFieldNumber;
const int LoginBroadcastResult::kVelocityYFieldNumber;
const int LoginBroadcastResult::kAngleFieldNumber;
const int LoginBroadcastResult::kColorFieldNumber;
const int LoginBroadcastResult::kSizeFieldNumber;
#endif  // !_MSC_VER

LoginBroadcastResult::LoginBroadcastResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginBroadcastResult::InitAsDefaultInstance() {
}

LoginBroadcastResult::LoginBroadcastResult(const LoginBroadcastResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginBroadcastResult::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  velocity_x_ = 0;
  velocity_y_ = 0;
  angle_ = 0;
  color_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginBroadcastResult::~LoginBroadcastResult() {
  SharedDtor();
}

void LoginBroadcastResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginBroadcastResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginBroadcastResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginBroadcastResult_descriptor_;
}

const LoginBroadcastResult& LoginBroadcastResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

LoginBroadcastResult* LoginBroadcastResult::default_instance_ = NULL;

LoginBroadcastResult* LoginBroadcastResult::New() const {
  return new LoginBroadcastResult;
}

void LoginBroadcastResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    position_x_ = 0;
    position_y_ = 0;
    velocity_x_ = 0;
    velocity_y_ = 0;
    angle_ = 0;
    color_ = 0;
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginBroadcastResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_position_x;
        break;
      }

      // required float position_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_position_y;
        break;
      }

      // required float position_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_velocity_x;
        break;
      }

      // required float velocity_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_velocity_y;
        break;
      }

      // required float velocity_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_angle;
        break;
      }

      // required float angle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_color;
        break;
      }

      // required int32 color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_size;
        break;
      }

      // required int32 size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginBroadcastResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required float position_x = 2;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position_x(), output);
  }

  // required float position_y = 3;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position_y(), output);
  }

  // required float velocity_x = 4;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity_x(), output);
  }

  // required float velocity_y = 5;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity_y(), output);
  }

  // required float angle = 6;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angle(), output);
  }

  // required int32 color = 7;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->color(), output);
  }

  // required int32 size = 8;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginBroadcastResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required float position_x = 2;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position_x(), target);
  }

  // required float position_y = 3;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position_y(), target);
  }

  // required float velocity_x = 4;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity_x(), target);
  }

  // required float velocity_y = 5;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity_y(), target);
  }

  // required float angle = 6;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angle(), target);
  }

  // required int32 color = 7;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->color(), target);
  }

  // required int32 size = 8;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginBroadcastResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required float position_x = 2;
    if (has_position_x()) {
      total_size += 1 + 4;
    }

    // required float position_y = 3;
    if (has_position_y()) {
      total_size += 1 + 4;
    }

    // required float velocity_x = 4;
    if (has_velocity_x()) {
      total_size += 1 + 4;
    }

    // required float velocity_y = 5;
    if (has_velocity_y()) {
      total_size += 1 + 4;
    }

    // required float angle = 6;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required int32 color = 7;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // required int32 size = 8;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginBroadcastResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginBroadcastResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginBroadcastResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginBroadcastResult::MergeFrom(const LoginBroadcastResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginBroadcastResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginBroadcastResult::CopyFrom(const LoginBroadcastResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginBroadcastResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void LoginBroadcastResult::Swap(LoginBroadcastResult* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(velocity_x_, other->velocity_x_);
    std::swap(velocity_y_, other->velocity_y_);
    std::swap(angle_, other->angle_);
    std::swap(color_, other->color_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginBroadcastResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginBroadcastResult_descriptor_;
  metadata.reflection = LoginBroadcastResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColorChangeRequest::kColorFieldNumber;
#endif  // !_MSC_VER

ColorChangeRequest::ColorChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColorChangeRequest::InitAsDefaultInstance() {
}

ColorChangeRequest::ColorChangeRequest(const ColorChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColorChangeRequest::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorChangeRequest::~ColorChangeRequest() {
  SharedDtor();
}

void ColorChangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorChangeRequest_descriptor_;
}

const ColorChangeRequest& ColorChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

ColorChangeRequest* ColorChangeRequest::default_instance_ = NULL;

ColorChangeRequest* ColorChangeRequest::New() const {
  return new ColorChangeRequest;
}

void ColorChangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColorChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColorChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColorChangeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorChangeRequest::MergeFrom(const ColorChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorChangeRequest::CopyFrom(const ColorChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorChangeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ColorChangeRequest::Swap(ColorChangeRequest* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorChangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorChangeRequest_descriptor_;
  metadata.reflection = ColorChangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponeBroadcastResult::kPlayerIdFieldNumber;
const int ResponeBroadcastResult::kPositionXFieldNumber;
const int ResponeBroadcastResult::kPositionYFieldNumber;
const int ResponeBroadcastResult::kVelocityXFieldNumber;
const int ResponeBroadcastResult::kVelocityYFieldNumber;
const int ResponeBroadcastResult::kAngleFieldNumber;
const int ResponeBroadcastResult::kColorFieldNumber;
const int ResponeBroadcastResult::kSizeFieldNumber;
#endif  // !_MSC_VER

ResponeBroadcastResult::ResponeBroadcastResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponeBroadcastResult::InitAsDefaultInstance() {
}

ResponeBroadcastResult::ResponeBroadcastResult(const ResponeBroadcastResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponeBroadcastResult::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  velocity_x_ = 0;
  velocity_y_ = 0;
  angle_ = 0;
  color_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponeBroadcastResult::~ResponeBroadcastResult() {
  SharedDtor();
}

void ResponeBroadcastResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponeBroadcastResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponeBroadcastResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponeBroadcastResult_descriptor_;
}

const ResponeBroadcastResult& ResponeBroadcastResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

ResponeBroadcastResult* ResponeBroadcastResult::default_instance_ = NULL;

ResponeBroadcastResult* ResponeBroadcastResult::New() const {
  return new ResponeBroadcastResult;
}

void ResponeBroadcastResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    position_x_ = 0;
    position_y_ = 0;
    velocity_x_ = 0;
    velocity_y_ = 0;
    angle_ = 0;
    color_ = 0;
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponeBroadcastResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_position_x;
        break;
      }

      // required float position_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_position_y;
        break;
      }

      // required float position_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_velocity_x;
        break;
      }

      // required float velocity_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_velocity_y;
        break;
      }

      // required float velocity_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_angle;
        break;
      }

      // required float angle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_color;
        break;
      }

      // required int32 color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_size;
        break;
      }

      // required int32 size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponeBroadcastResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required float position_x = 2;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position_x(), output);
  }

  // required float position_y = 3;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position_y(), output);
  }

  // required float velocity_x = 4;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity_x(), output);
  }

  // required float velocity_y = 5;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity_y(), output);
  }

  // required float angle = 6;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angle(), output);
  }

  // required int32 color = 7;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->color(), output);
  }

  // required int32 size = 8;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponeBroadcastResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required float position_x = 2;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position_x(), target);
  }

  // required float position_y = 3;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position_y(), target);
  }

  // required float velocity_x = 4;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity_x(), target);
  }

  // required float velocity_y = 5;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity_y(), target);
  }

  // required float angle = 6;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angle(), target);
  }

  // required int32 color = 7;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->color(), target);
  }

  // required int32 size = 8;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponeBroadcastResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required float position_x = 2;
    if (has_position_x()) {
      total_size += 1 + 4;
    }

    // required float position_y = 3;
    if (has_position_y()) {
      total_size += 1 + 4;
    }

    // required float velocity_x = 4;
    if (has_velocity_x()) {
      total_size += 1 + 4;
    }

    // required float velocity_y = 5;
    if (has_velocity_y()) {
      total_size += 1 + 4;
    }

    // required float angle = 6;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required int32 color = 7;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // required int32 size = 8;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponeBroadcastResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponeBroadcastResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponeBroadcastResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponeBroadcastResult::MergeFrom(const ResponeBroadcastResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponeBroadcastResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponeBroadcastResult::CopyFrom(const ResponeBroadcastResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponeBroadcastResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void ResponeBroadcastResult::Swap(ResponeBroadcastResult* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(velocity_x_, other->velocity_x_);
    std::swap(velocity_y_, other->velocity_y_);
    std::swap(angle_, other->angle_);
    std::swap(color_, other->color_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponeBroadcastResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponeBroadcastResult_descriptor_;
  metadata.reflection = ResponeBroadcastResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AngleChangeRequest::kAngleFieldNumber;
#endif  // !_MSC_VER

AngleChangeRequest::AngleChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AngleChangeRequest::InitAsDefaultInstance() {
}

AngleChangeRequest::AngleChangeRequest(const AngleChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AngleChangeRequest::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AngleChangeRequest::~AngleChangeRequest() {
  SharedDtor();
}

void AngleChangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AngleChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AngleChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AngleChangeRequest_descriptor_;
}

const AngleChangeRequest& AngleChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

AngleChangeRequest* AngleChangeRequest::default_instance_ = NULL;

AngleChangeRequest* AngleChangeRequest::New() const {
  return new AngleChangeRequest;
}

void AngleChangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AngleChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AngleChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AngleChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AngleChangeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float angle = 1;
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AngleChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AngleChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AngleChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AngleChangeRequest::MergeFrom(const AngleChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AngleChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngleChangeRequest::CopyFrom(const AngleChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngleChangeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AngleChangeRequest::Swap(AngleChangeRequest* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AngleChangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AngleChangeRequest_descriptor_;
  metadata.reflection = AngleChangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AngleChangeBroadcastResult::kPlayerIdFieldNumber;
const int AngleChangeBroadcastResult::kAngleFieldNumber;
#endif  // !_MSC_VER

AngleChangeBroadcastResult::AngleChangeBroadcastResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AngleChangeBroadcastResult::InitAsDefaultInstance() {
}

AngleChangeBroadcastResult::AngleChangeBroadcastResult(const AngleChangeBroadcastResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AngleChangeBroadcastResult::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AngleChangeBroadcastResult::~AngleChangeBroadcastResult() {
  SharedDtor();
}

void AngleChangeBroadcastResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AngleChangeBroadcastResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AngleChangeBroadcastResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AngleChangeBroadcastResult_descriptor_;
}

const AngleChangeBroadcastResult& AngleChangeBroadcastResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

AngleChangeBroadcastResult* AngleChangeBroadcastResult::default_instance_ = NULL;

AngleChangeBroadcastResult* AngleChangeBroadcastResult::New() const {
  return new AngleChangeBroadcastResult;
}

void AngleChangeBroadcastResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AngleChangeBroadcastResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_angle;
        break;
      }

      // required float angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AngleChangeBroadcastResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required float angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AngleChangeBroadcastResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required float angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AngleChangeBroadcastResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required float angle = 2;
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AngleChangeBroadcastResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AngleChangeBroadcastResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AngleChangeBroadcastResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AngleChangeBroadcastResult::MergeFrom(const AngleChangeBroadcastResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AngleChangeBroadcastResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngleChangeBroadcastResult::CopyFrom(const AngleChangeBroadcastResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngleChangeBroadcastResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AngleChangeBroadcastResult::Swap(AngleChangeBroadcastResult* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AngleChangeBroadcastResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AngleChangeBroadcastResult_descriptor_;
  metadata.reflection = AngleChangeBroadcastResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveKeyPressRequest::kMoveKeyWPressFieldNumber;
const int MoveKeyPressRequest::kMoveKeyAPressFieldNumber;
const int MoveKeyPressRequest::kMoveKeySPressFieldNumber;
const int MoveKeyPressRequest::kMoveKeyDPressFieldNumber;
#endif  // !_MSC_VER

MoveKeyPressRequest::MoveKeyPressRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveKeyPressRequest::InitAsDefaultInstance() {
}

MoveKeyPressRequest::MoveKeyPressRequest(const MoveKeyPressRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveKeyPressRequest::SharedCtor() {
  _cached_size_ = 0;
  move_key_w_press_ = false;
  move_key_a_press_ = false;
  move_key_s_press_ = false;
  move_key_d_press_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveKeyPressRequest::~MoveKeyPressRequest() {
  SharedDtor();
}

void MoveKeyPressRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveKeyPressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveKeyPressRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveKeyPressRequest_descriptor_;
}

const MoveKeyPressRequest& MoveKeyPressRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

MoveKeyPressRequest* MoveKeyPressRequest::default_instance_ = NULL;

MoveKeyPressRequest* MoveKeyPressRequest::New() const {
  return new MoveKeyPressRequest;
}

void MoveKeyPressRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    move_key_w_press_ = false;
    move_key_a_press_ = false;
    move_key_s_press_ = false;
    move_key_d_press_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveKeyPressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool move_key_w_press = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &move_key_w_press_)));
          set_has_move_key_w_press();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_move_key_a_press;
        break;
      }

      // required bool move_key_a_press = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_key_a_press:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &move_key_a_press_)));
          set_has_move_key_a_press();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_move_key_s_press;
        break;
      }

      // required bool move_key_s_press = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_key_s_press:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &move_key_s_press_)));
          set_has_move_key_s_press();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_move_key_d_press;
        break;
      }

      // required bool move_key_d_press = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_key_d_press:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &move_key_d_press_)));
          set_has_move_key_d_press();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveKeyPressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool move_key_w_press = 1;
  if (has_move_key_w_press()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->move_key_w_press(), output);
  }

  // required bool move_key_a_press = 2;
  if (has_move_key_a_press()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->move_key_a_press(), output);
  }

  // required bool move_key_s_press = 3;
  if (has_move_key_s_press()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->move_key_s_press(), output);
  }

  // required bool move_key_d_press = 4;
  if (has_move_key_d_press()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->move_key_d_press(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveKeyPressRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool move_key_w_press = 1;
  if (has_move_key_w_press()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->move_key_w_press(), target);
  }

  // required bool move_key_a_press = 2;
  if (has_move_key_a_press()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->move_key_a_press(), target);
  }

  // required bool move_key_s_press = 3;
  if (has_move_key_s_press()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->move_key_s_press(), target);
  }

  // required bool move_key_d_press = 4;
  if (has_move_key_d_press()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->move_key_d_press(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveKeyPressRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool move_key_w_press = 1;
    if (has_move_key_w_press()) {
      total_size += 1 + 1;
    }

    // required bool move_key_a_press = 2;
    if (has_move_key_a_press()) {
      total_size += 1 + 1;
    }

    // required bool move_key_s_press = 3;
    if (has_move_key_s_press()) {
      total_size += 1 + 1;
    }

    // required bool move_key_d_press = 4;
    if (has_move_key_d_press()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveKeyPressRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveKeyPressRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveKeyPressRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveKeyPressRequest::MergeFrom(const MoveKeyPressRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_move_key_w_press()) {
      set_move_key_w_press(from.move_key_w_press());
    }
    if (from.has_move_key_a_press()) {
      set_move_key_a_press(from.move_key_a_press());
    }
    if (from.has_move_key_s_press()) {
      set_move_key_s_press(from.move_key_s_press());
    }
    if (from.has_move_key_d_press()) {
      set_move_key_d_press(from.move_key_d_press());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveKeyPressRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveKeyPressRequest::CopyFrom(const MoveKeyPressRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveKeyPressRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MoveKeyPressRequest::Swap(MoveKeyPressRequest* other) {
  if (other != this) {
    std::swap(move_key_w_press_, other->move_key_w_press_);
    std::swap(move_key_a_press_, other->move_key_a_press_);
    std::swap(move_key_s_press_, other->move_key_s_press_);
    std::swap(move_key_d_press_, other->move_key_d_press_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveKeyPressRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveKeyPressRequest_descriptor_;
  metadata.reflection = MoveKeyPressRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveResult::kPlayerIdFieldNumber;
const int MoveResult::kPositionXFieldNumber;
const int MoveResult::kPositionYFieldNumber;
const int MoveResult::kVelocityXFieldNumber;
const int MoveResult::kVelocityYFieldNumber;
#endif  // !_MSC_VER

MoveResult::MoveResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveResult::InitAsDefaultInstance() {
}

MoveResult::MoveResult(const MoveResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveResult::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  velocity_x_ = 0;
  velocity_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveResult::~MoveResult() {
  SharedDtor();
}

void MoveResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveResult_descriptor_;
}

const MoveResult& MoveResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

MoveResult* MoveResult::default_instance_ = NULL;

MoveResult* MoveResult::New() const {
  return new MoveResult;
}

void MoveResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    position_x_ = 0;
    position_y_ = 0;
    velocity_x_ = 0;
    velocity_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_position_x;
        break;
      }

      // required float position_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_position_y;
        break;
      }

      // required float position_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_velocity_x;
        break;
      }

      // required float velocity_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_velocity_y;
        break;
      }

      // required float velocity_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required float position_x = 2;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position_x(), output);
  }

  // required float position_y = 3;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position_y(), output);
  }

  // required float velocity_x = 4;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity_x(), output);
  }

  // required float velocity_y = 5;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocity_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required float position_x = 2;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position_x(), target);
  }

  // required float position_y = 3;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position_y(), target);
  }

  // required float velocity_x = 4;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity_x(), target);
  }

  // required float velocity_y = 5;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocity_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required float position_x = 2;
    if (has_position_x()) {
      total_size += 1 + 4;
    }

    // required float position_y = 3;
    if (has_position_y()) {
      total_size += 1 + 4;
    }

    // required float velocity_x = 4;
    if (has_velocity_x()) {
      total_size += 1 + 4;
    }

    // required float velocity_y = 5;
    if (has_velocity_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveResult::MergeFrom(const MoveResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveResult::CopyFrom(const MoveResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MoveResult::Swap(MoveResult* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(velocity_x_, other->velocity_x_);
    std::swap(velocity_y_, other->velocity_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveResult_descriptor_;
  metadata.reflection = MoveResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveStopResult::kPlayerIdFieldNumber;
const int MoveStopResult::kPositionXFieldNumber;
const int MoveStopResult::kPositionYFieldNumber;
#endif  // !_MSC_VER

MoveStopResult::MoveStopResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveStopResult::InitAsDefaultInstance() {
}

MoveStopResult::MoveStopResult(const MoveStopResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveStopResult::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveStopResult::~MoveStopResult() {
  SharedDtor();
}

void MoveStopResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveStopResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveStopResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveStopResult_descriptor_;
}

const MoveStopResult& MoveStopResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

MoveStopResult* MoveStopResult::default_instance_ = NULL;

MoveStopResult* MoveStopResult::New() const {
  return new MoveStopResult;
}

void MoveStopResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    position_x_ = 0;
    position_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveStopResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_position_x;
        break;
      }

      // required float position_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_position_y;
        break;
      }

      // required float position_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveStopResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required float position_x = 2;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position_x(), output);
  }

  // required float position_y = 3;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveStopResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required float position_x = 2;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position_x(), target);
  }

  // required float position_y = 3;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveStopResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required float position_x = 2;
    if (has_position_x()) {
      total_size += 1 + 4;
    }

    // required float position_y = 3;
    if (has_position_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveStopResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveStopResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveStopResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveStopResult::MergeFrom(const MoveStopResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveStopResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveStopResult::CopyFrom(const MoveStopResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveStopResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MoveStopResult::Swap(MoveStopResult* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveStopResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveStopResult_descriptor_;
  metadata.reflection = MoveStopResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackKeyPressRequest::kAttackKeyMouseLeftPressFieldNumber;
const int AttackKeyPressRequest::kAngleFieldNumber;
#endif  // !_MSC_VER

AttackKeyPressRequest::AttackKeyPressRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackKeyPressRequest::InitAsDefaultInstance() {
}

AttackKeyPressRequest::AttackKeyPressRequest(const AttackKeyPressRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackKeyPressRequest::SharedCtor() {
  _cached_size_ = 0;
  attack_key_mouse_left_press_ = false;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackKeyPressRequest::~AttackKeyPressRequest() {
  SharedDtor();
}

void AttackKeyPressRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttackKeyPressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackKeyPressRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackKeyPressRequest_descriptor_;
}

const AttackKeyPressRequest& AttackKeyPressRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

AttackKeyPressRequest* AttackKeyPressRequest::default_instance_ = NULL;

AttackKeyPressRequest* AttackKeyPressRequest::New() const {
  return new AttackKeyPressRequest;
}

void AttackKeyPressRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_key_mouse_left_press_ = false;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackKeyPressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool attack_key_mouse_left_press = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attack_key_mouse_left_press_)));
          set_has_attack_key_mouse_left_press();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_angle;
        break;
      }

      // required float angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackKeyPressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool attack_key_mouse_left_press = 1;
  if (has_attack_key_mouse_left_press()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->attack_key_mouse_left_press(), output);
  }

  // required float angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackKeyPressRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool attack_key_mouse_left_press = 1;
  if (has_attack_key_mouse_left_press()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->attack_key_mouse_left_press(), target);
  }

  // required float angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackKeyPressRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool attack_key_mouse_left_press = 1;
    if (has_attack_key_mouse_left_press()) {
      total_size += 1 + 1;
    }

    // required float angle = 2;
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackKeyPressRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackKeyPressRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackKeyPressRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackKeyPressRequest::MergeFrom(const AttackKeyPressRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_key_mouse_left_press()) {
      set_attack_key_mouse_left_press(from.attack_key_mouse_left_press());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackKeyPressRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackKeyPressRequest::CopyFrom(const AttackKeyPressRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackKeyPressRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AttackKeyPressRequest::Swap(AttackKeyPressRequest* other) {
  if (other != this) {
    std::swap(attack_key_mouse_left_press_, other->attack_key_mouse_left_press_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackKeyPressRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackKeyPressRequest_descriptor_;
  metadata.reflection = AttackKeyPressRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackBroadcastResult::kAttackPlayerIdFieldNumber;
const int AttackBroadcastResult::kAngleFieldNumber;
const int AttackBroadcastResult::kKindOfAttackFieldNumber;
const int AttackBroadcastResult::kDamagedPlayerCountFieldNumber;
#endif  // !_MSC_VER

AttackBroadcastResult::AttackBroadcastResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackBroadcastResult::InitAsDefaultInstance() {
}

AttackBroadcastResult::AttackBroadcastResult(const AttackBroadcastResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackBroadcastResult::SharedCtor() {
  _cached_size_ = 0;
  attack_player_id_ = 0;
  angle_ = 0;
  kind_of_attack_ = 0;
  damaged_player_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackBroadcastResult::~AttackBroadcastResult() {
  SharedDtor();
}

void AttackBroadcastResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttackBroadcastResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackBroadcastResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackBroadcastResult_descriptor_;
}

const AttackBroadcastResult& AttackBroadcastResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

AttackBroadcastResult* AttackBroadcastResult::default_instance_ = NULL;

AttackBroadcastResult* AttackBroadcastResult::New() const {
  return new AttackBroadcastResult;
}

void AttackBroadcastResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_player_id_ = 0;
    angle_ = 0;
    kind_of_attack_ = 0;
    damaged_player_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackBroadcastResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 attack_player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_player_id_)));
          set_has_attack_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_angle;
        break;
      }

      // required float angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kind_of_attack;
        break;
      }

      // required int32 kind_of_attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind_of_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_of_attack_)));
          set_has_kind_of_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damaged_player_count;
        break;
      }

      // required int32 damaged_player_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damaged_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damaged_player_count_)));
          set_has_damaged_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackBroadcastResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 attack_player_id = 1;
  if (has_attack_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attack_player_id(), output);
  }

  // required float angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // required int32 kind_of_attack = 3;
  if (has_kind_of_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kind_of_attack(), output);
  }

  // required int32 damaged_player_count = 4;
  if (has_damaged_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damaged_player_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackBroadcastResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 attack_player_id = 1;
  if (has_attack_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attack_player_id(), target);
  }

  // required float angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // required int32 kind_of_attack = 3;
  if (has_kind_of_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kind_of_attack(), target);
  }

  // required int32 damaged_player_count = 4;
  if (has_damaged_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damaged_player_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackBroadcastResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 attack_player_id = 1;
    if (has_attack_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_player_id());
    }

    // required float angle = 2;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required int32 kind_of_attack = 3;
    if (has_kind_of_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind_of_attack());
    }

    // required int32 damaged_player_count = 4;
    if (has_damaged_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damaged_player_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackBroadcastResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackBroadcastResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackBroadcastResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackBroadcastResult::MergeFrom(const AttackBroadcastResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_player_id()) {
      set_attack_player_id(from.attack_player_id());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_kind_of_attack()) {
      set_kind_of_attack(from.kind_of_attack());
    }
    if (from.has_damaged_player_count()) {
      set_damaged_player_count(from.damaged_player_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackBroadcastResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackBroadcastResult::CopyFrom(const AttackBroadcastResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackBroadcastResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AttackBroadcastResult::Swap(AttackBroadcastResult* other) {
  if (other != this) {
    std::swap(attack_player_id_, other->attack_player_id_);
    std::swap(angle_, other->angle_);
    std::swap(kind_of_attack_, other->kind_of_attack_);
    std::swap(damaged_player_count_, other->damaged_player_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackBroadcastResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackBroadcastResult_descriptor_;
  metadata.reflection = AttackBroadcastResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPChangeResult::kPlayerIdFieldNumber;
const int HPChangeResult::kPlayerHpFieldNumber;
#endif  // !_MSC_VER

HPChangeResult::HPChangeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HPChangeResult::InitAsDefaultInstance() {
}

HPChangeResult::HPChangeResult(const HPChangeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HPChangeResult::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPChangeResult::~HPChangeResult() {
  SharedDtor();
}

void HPChangeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPChangeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPChangeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPChangeResult_descriptor_;
}

const HPChangeResult& HPChangeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5ftype_2eproto();
  return *default_instance_;
}

HPChangeResult* HPChangeResult::default_instance_ = NULL;

HPChangeResult* HPChangeResult::New() const {
  return new HPChangeResult;
}

void HPChangeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    player_hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPChangeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_hp;
        break;
      }

      // required int32 player_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_hp_)));
          set_has_player_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HPChangeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required int32 player_hp = 2;
  if (has_player_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HPChangeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required int32 player_hp = 2;
  if (has_player_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HPChangeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 player_hp = 2;
    if (has_player_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPChangeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPChangeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPChangeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPChangeResult::MergeFrom(const HPChangeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_hp()) {
      set_player_hp(from.player_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPChangeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPChangeResult::CopyFrom(const HPChangeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPChangeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HPChangeResult::Swap(HPChangeResult* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_hp_, other->player_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPChangeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPChangeResult_descriptor_;
  metadata.reflection = HPChangeResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
